
import telebot
import extensions
from tkn_config import token, list_valute

mybot=telebot.TeleBot(token)
@mybot.message_handler(commands=['start'])
def start_message(message):
  mybot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è\n–ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n*üëç –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:*\nUSD RUB 100", parse_mode='Markdown')


@mybot.message_handler(commands=['help'])
def start_message(message):
  mybot.send_message(message.chat.id,"–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è *–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã*.\n–ó–∞–ø—Ä–æ—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –≤–∏–¥–µ:\n<–∏–º—è –≤–∞–ª—é—Ç—ã —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–π –æ–Ω —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å> <–∏–º—è –≤–∞–ª—é—Ç—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—É –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã>\n\n*üëç –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:*\nUSD RUB 100", parse_mode='Markdown')


@mybot.message_handler(commands=['values'])
def start_message(message):
  mybot.send_message(message.chat.id,"üí∞ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–µ–∂–¥—É —Å–æ–±–æ–π –º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∞–ª—é—Ç—ã:\n\nüî∑*USD* - –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä\nüî∑*EUR* - –µ–≤—Ä–æ\nüî∑*RUB* - —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å\n", parse_mode='Markdown')


@mybot.message_handler(content_types=['text'])
def get_text_messages(message):
    try:
        list_of_value = message.text.split()
        if len(list_of_value) != 3:
            raise extensions.APIExtension('‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤!')
        if list_of_value[0].upper() not in list_valute:
            raise extensions.APIExtension('‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã {} –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!\n–î–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –≤–∞–ª—é—Ç –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /values'.format(list_of_value[0]))
        if list_of_value[1].upper() not in list_valute:
            raise extensions.APIExtension('‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã {} –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!\n–î–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –≤–∞–ª—é—Ç –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /values'.format(list_of_value[1]))
        if not list_of_value[2].isdigit():
            raise extensions.APIExtension('‚ùå {} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!'.format(list_of_value[2]))
        cur_price = extensions.CryptoComp.get_prices(list_of_value[0].upper(), list_of_value[1].upper(), int(list_of_value[2]))
        text_for_msg = '–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è *' + list_of_value[2] + ' ' + list_of_value[0].upper() + '*\n–í–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è *' + str(cur_price) + ' ' + list_of_value[1].upper() + '*'
        mybot.send_message(message.chat.id, text=text_for_msg, parse_mode='MarkDown')
        mybot.send_message(message.chat.id, text='–ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n*üëç –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:*\nUSD RUB 100', parse_mode='MarkDown')
    except extensions.APIExtension as ae:
        mybot.send_message(message.chat.id, text=ae, parse_mode='MarkDown')
        mybot.send_message(message.chat.id, text='–ü—Ä–∏—à–ª–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.\n\n*üëç –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:*\nUSD RUB 100', parse_mode='MarkDown')

    


if __name__ == '__main__':
    mybot.infinity_polling()